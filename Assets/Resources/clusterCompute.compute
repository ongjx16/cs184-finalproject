// cluster.compute

#pragma kernel clusterCompute

#include "Simplex.compute"

struct GrassData {
    float4 position;
};

RWStructuredBuffer<GrassData> _GrassDataBuffer;
int _Dimension, _Scale, x_offset, y_offset;

[numthreads(8,8,1)]
void clusterCompute(uint3 id : SV_DispatchThreadID) {
    // Ensures that all grass renders within the boundaries set by `_Dimension`. 
    // For more information on what `_Dimension` is, refer to `resolution` in `GrassInstantiator.cs`.
    // `id` here iterates from `0` to `_Dimension` in each axis.
    // `id.x` corresponds to the row of the grass cluster.
    // `id.y` corresponds to the column of the grass cluster.
    if (id.x < uint(_Dimension) && id.y < uint(_Dimension)) {
        GrassData grass;
        float4 pos = 0.0f;

        // Determine xz coordinates of grass cluster.
        pos.xz = (id.xy - float(_Dimension) * 0.5) * (1.0f / float(_Scale));
        pos.x += x_offset/2;
        pos.z += y_offset/2;

        pos.x += snoise(float3(pos.xz, 0.0f) * 3.0f) * 0.2f;
        pos.z += snoise(float3(pos.xz, 0.0f) * 4.0f) * 0.2f;

        // TODO(@sktlim): Implement height noise for grass here.
        pos.y = 0;
        pos.w = max(1.0f, abs(snoise(float3(pos.xz, 0.0f) * 0.2f) * 2.5f));

        grass.position = pos;

        _GrassDataBuffer[id.x + id.y * _Dimension] = grass;
    }
}
